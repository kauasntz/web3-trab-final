// MashupApplication.java
package com.mashup;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootApplication
@RestController
@RequestMapping("/api/vendas")
public class MashupApplication {

    private static final String PRECO_SERVICE_URL = "http://localhost:8081/api/tomate/preco";
    private static final String FRETE_SERVICE_URL = "http://localhost:8082/graphql";
    
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    public MashupApplication(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public static void main(String[] args) {
        SpringApplication.run(MashupApplication.class, args);
    }

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }

    @Bean
    public ObjectMapper objectMapper() {
        return new ObjectMapper();
    }

    @PostMapping("/calcular")
    public VendaResponse calcularVenda(@RequestBody VendaRequest request) {
        try {
            // 1. Buscar preço dos tomates
            PrecoResponse precoTomate = buscarPrecoTomate(request.getQuantidadeCaixas());
            
            // 2. Determinar melhor tipo de veículo
            String tipoVeiculo = determinarTipoVeiculo(request.getQuantidadeCaixas(), request.getDistancia());
            
            // 3. Buscar custo do frete
            FreteResponse frete = buscarCustoFrete(request.getDistancia(), tipoVeiculo);
            
            // 4. Aplicar regras de negócio do mashup
            return aplicarRegrasNegocio(precoTomate, frete, request);
            
        } catch (Exception e) {
            throw new RuntimeException("Erro ao processar venda: " + e.getMessage());
        }
    }

    private PrecoResponse buscarPrecoTomate(int quantidade) {
        String url = PRECO_SERVICE_URL + "?quantidade=" + quantidade;
        return restTemplate.getForObject(url, PrecoResponse.class);
    }

    private FreteResponse buscarCustoFrete(int distancia, String tipoVeiculo) {
        try {
            String query = String.format(
                "{ \"query\": \"{ calcularFrete(quilometragem: %d, tipoVeiculo: \\\"%s\\\") { quilometragem tipoVeiculo capacidade precoPorKm taxaFixa valorBase valorTotal } }\" }",
                distancia, tipoVeiculo
            );

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<String> entity = new HttpEntity<>(query, headers);

            String response = restTemplate.postForObject(FRETE_SERVICE_URL, entity, String.class);
            
            // Parse da resposta GraphQL
            var jsonNode = objectMapper.readTree(response);
            var freteData = jsonNode.get("data").get("calcularFrete");
            
            return new FreteResponse(
                freteData.get("quilometragem").asInt(),
                freteData.get("tipoVeiculo").asText(),
                freteData.get("capacidade").asInt(),
                freteData.get("precoPorKm").asDouble(),
                freteData.get("taxaFixa").asDouble(),
                freteData.get("valorBase").asDouble(),
                freteData.get("valorTotal").asDouble()
            );
            
        } catch (Exception e) {
            throw new RuntimeException("Erro ao buscar frete: " + e.getMessage());
        }
    }

    private String determinarTipoVeiculo(int quantidade, int distancia) {
        // Capacidades: Caminhão = 250, Carreta = 1500
        
        if (quantidade > 250) {
            return "CARRETA"; // Obrigatório usar carreta
        }
        
        // Para quantidades menores, avaliar custo-benefício
        // Simular custo com ambos os veículos para decisão inteligente
        try {
            FreteResponse custoCaminhao = buscarCustoFreteSimulacao(distancia, "CAMINHAO");
            FreteResponse custoCarreta = buscarCustoFreteSimulacao(distancia, "CARRETA");
            
            // Se a diferença for pequena (menos de 20%), preferir carreta para maior segurança
            if ((custoCarreta.getValorTotal() - custoCaminhao.getValorTotal()) / custoCaminhao.getValorTotal() < 0.2) {
                return "CARRETA";
            }
            
            return "CAMINHAO";
        } catch (Exception e) {
            // Em caso de erro, usar lógica simples
            return quantidade <= 250 ? "CAMINHAO" : "CARRETA";
        }
    }

    private FreteResponse buscarCustoFreteSimulacao(int distancia, String tipoVeiculo) {
        // Cálculo local para simulação (evita múltiplas chamadas)
        TipoVeiculo veiculo = TipoVeiculo.valueOf(tipoVeiculo);
        
        double valorBase = distancia <= 100 ? 
            distancia * veiculo.getPrecoPorKm() : 
            100 * veiculo.getPrecoPorKm() + (distancia - 100) * veiculo.getPrecoPorKm() * 0.8;
            
        double valorTotal = valorBase + veiculo.getTaxaFixa();
        
        return new FreteResponse(distancia, tipoVeiculo, veiculo.getCapacidade(), 
                               veiculo.getPrecoPorKm(), veiculo.getTaxaFixa(), valorBase, valorTotal);
    }

    private VendaResponse aplicarRegrasNegocio(PrecoResponse preco, FreteResponse frete, VendaRequest request) {
        double custoBase = preco.getPrecoFinal() + frete.getValorTotal();
        
        // 1. Aplicar lucro fixo de 55%
        double valorComLucro = custoBase * 1.55;
        
        // 2. Aplicar descontos por volume
        double desconto = 0.0;
        if (request.getQuantidadeCaixas() >= 300) {
            desconto = 0.12; // 12%
        } else if (request.getQuantidadeCaixas() >= 50) {
            desconto = 0.075; // 7.5%
        }
        
        double valorComDesconto = valorComLucro * (1 - desconto);
        
        // 3. Aplicar impostos de 27%
        double valorFinal = valorComDesconto * 1.27;
        
        return new VendaResponse(
            request.getQuantidadeCaixas(),
            request.getDistancia(),
            preco,
            frete,
            custoBase,
            0.55, // 55% lucro
            desconto * 100, // percentual desconto
            0.27, // 27% impostos
            valorFinal,
            "Cálculo realizado com sucesso"
        );
    }

    // Classes auxiliares
    enum TipoVeiculo {
        CAMINHAO(250, 20.0, 200.0),
        CARRETA(1500, 40.0, 400.0);

        private final int capacidade;
        private final double precoPorKm;
        private final double taxaFixa;

        TipoVeiculo(int capacidade, double precoPorKm, double taxaFixa) {
            this.capacidade = capacidade;
            this.precoPorKm = precoPorKm;
            this.taxaFixa = taxaFixa;
        }

        public int getCapacidade() { return capacidade; }
        public double getPrecoPorKm() { return precoPorKm; }
        public double getTaxaFixa() { return taxaFixa; }
    }

    // Classes de Request e Response
    public static class VendaRequest {
        private int quantidadeCaixas;
        private int distancia;

        public int getQuantidadeCaixas() { return quantidadeCaixas; }
        public void setQuantidadeCaixas(int quantidadeCaixas) { this.quantidadeCaixas = quantidadeCaixas; }
        public int getDistancia() { return distancia; }
        public void setDistancia(int distancia) { this.distancia = distancia; }
    }

    public static class VendaResponse {
        private int quantidadeCaixas;
        private int distancia;
        private PrecoResponse precoTomate;
        private FreteResponse frete;
        private double custoBase;
        private double percentualLucro;
        private double percentualDesconto;
        private double percentualImpostos;
        private double valorFinal;
        private String status;

        public VendaResponse(int quantidadeCaixas, int distancia, PrecoResponse precoTomate, 
                           FreteResponse frete, double custoBase, double percentualLucro, 
                           double percentualDesconto, double percentualImpostos, 
                           double valorFinal, String status) {
            this.quantidadeCaixas = quantidadeCaixas;
            this.distancia = distancia;
            this.precoTomate = precoTomate;
            this.frete = frete;
            this.custoBase = custoBase;
            this.percentualLucro = percentualLucro;
            this.percentualDesconto = percentualDesconto;
            this.percentualImpostos = percentualImpostos;
            this.valorFinal = valorFinal;
            this.status = status;
        }

        // Getters
        public int getQuantidadeCaixas() { return quantidadeCaixas; }
        public int getDistancia() { return distancia; }
        public PrecoResponse getPrecoTomate() { return precoTomate; }
        public FreteResponse getFrete() { return frete; }
        public double getCustoBase() { return custoBase; }
        public double getPercentualLucro() { return percentualLucro; }
        public double getPercentualDesconto() { return percentualDesconto; }
        public double getPercentualImpostos() { return percentualImpostos; }
        public double getValorFinal() { return valorFinal; }
        public String getStatus() { return status; }
    }

    public static class PrecoResponse {
        private int quantidade;
        private double precoUnitario;
        private double precoTotal;
        private double percentualDesconto;
        private double precoFinal;

        // Getters e Setters
        public int getQuantidade() { return quantidade; }
        public void setQuantidade(int quantidade) { this.quantidade = quantidade; }
        public double getPrecoUnitario() { return precoUnitario; }
        public void setPrecoUnitario(double precoUnitario) { this.precoUnitario = precoUnitario; }
        public double getPrecoTotal() { return precoTotal; }
        public void setPrecoTotal(double precoTotal) { this.precoTotal = precoTotal; }
        public double getPercentualDesconto() { return percentualDesconto; }
        public void setPercentualDesconto(double percentualDesconto) { this.percentualDesconto = percentualDesconto; }
        public double getPrecoFinal() { return precoFinal; }
        public void setPrecoFinal(double precoFinal) { this.precoFinal = precoFinal; }
    }

    public static class FreteResponse {
        private int quilometragem;
        private String tipoVeiculo;
        private int capacidade;
        private double precoPorKm;
        private double taxaFixa;
        private double valorBase;
        private double valorTotal;

        public FreteResponse(int quilometragem, String tipoVeiculo, int capacidade, 
                           double precoPorKm, double taxaFixa, double valorBase, double valorTotal) {
            this.quilometragem = quilometragem;
            this.tipoVeiculo = tipoVeiculo;
            this.capacidade = capacidade;
            this.precoPorKm = precoPorKm;
            this.taxaFixa = taxaFixa;
            this.valorBase = valorBase;
            this.valorTotal = valorTotal;
        }

        // Getters
        public int getQuilometragem() { return quilometragem; }
        public String getTipoVeiculo() { return tipoVeiculo; }
        public int getCapacidade() { return capacidade; }
        public double getPrecoPorKm() { return precoPorKm; }
        public double getTaxaFixa() { return taxaFixa; }
        public double getValorBase() { return valorBase; }
        public double getValorTotal() { return valorTotal; }
    }
}

# application.properties
server.port=8080
spring.application.name=mashup-service

# pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>
    <groupId>com.mashup</groupId>
    <artifactId>mashup-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <n>mashup-service</n>
    <description>Mashup de Venda e Entrega de Tomates</description>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>