// IntegrationTest.java - Para o serviço Mashup
package com.mashup;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class IntegrationTest {

    @LocalServerPort
    private int port;

    private TestRestTemplate restTemplate = new TestRestTemplate();

    @Test
    public void testVendaComPoucasCaixas() {
        // Cenário: 5 caixas, 50km - deve usar caminhão
        MashupApplication.VendaRequest request = new MashupApplication.VendaRequest();
        request.setQuantidadeCaixas(5);
        request.setDistancia(50);

        ResponseEntity<MashupApplication.VendaResponse> response = restTemplate.postForEntity(
            "http://localhost:" + port + "/api/vendas/calcular", 
            request, 
            MashupApplication.VendaResponse.class
        );

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(5, response.getBody().getQuantidadeCaixas());
        assertEquals("CAMINHAO", response.getBody().getFrete().getTipoVeiculo());
        assertTrue(response.getBody().getValorFinal() > 0);
        
        System.out.println("Teste 1 - Poucas caixas:");
        System.out.println("Quantidade: " + response.getBody().getQuantidadeCaixas() + " caixas");
        System.out.println("Distância: " + response.getBody().getDistancia() + "km");
        System.out.println("Veículo: " + response.getBody().getFrete().getTipoVeiculo());
        System.out.println("Valor Final: R$ " + String.format("%.2f", response.getBody().getValorFinal()));
        System.out.println("Desconto por Volume: " + response.getBody().getPercentualDesconto() + "%\n");
    }

    @Test
    public void testVendaComDescontoMedio() {
        // Cenário: 75 caixas, 120km - deve ter 7.5% desconto
        MashupApplication.VendaRequest request = new MashupApplication.VendaRequest();
        request.setQuantidadeCaixas(75);
        request.setDistancia(120);

        ResponseEntity<MashupApplication.VendaResponse> response = restTemplate.postForEntity(
            "http://localhost:" + port + "/api/vendas/calcular", 
            request, 
            MashupApplication.VendaResponse.class
        );

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(7.5, response.getBody().getPercentualDesconto(), 0.01);
        
        System.out.println("Teste 2 - Desconto médio (7.5%):");
        System.out.println("Quantidade: " + response.getBody().getQuantidadeCaixas() + " caixas");
        System.out.println("Distância: " + response.getBody().getDistancia() + "km");
        System.out.println("Veículo: " + response.getBody().getFrete().getTipoVeiculo());
        System.out.println("Valor Final: R$ " + String.format("%.2f", response.getBody().getValorFinal()));
        System.out.println("Desconto por Volume: " + response.getBody().getPercentualDesconto() + "%\n");
    }

    @Test
    public void testVendaComDescontoMaximo() {
        // Cenário: 500 caixas, 200km - deve usar carreta e ter 12% desconto
        MashupApplication.VendaRequest request = new MashupApplication.VendaRequest();
        request.setQuantidadeCaixas(500);
        request.setDistancia(200);

        ResponseEntity<MashupApplication.VendaResponse> response = restTemplate.postForEntity(
            "http://localhost:" + port + "/api/vendas/calcular", 
            request, 
            MashupApplication.VendaResponse.class
        );

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("CARRETA", response.getBody().getFrete().getTipoVeiculo());
        assertEquals(12.0, response.getBody().getPercentualDesconto(), 0.01);
        
        System.out.println("Teste 3 - Desconto máximo (12%) + Carreta:");
        System.out.println("Quantidade: " + response.getBody().getQuantidadeCaixas() + " caixas");
        System.out.println("Distância: " + response.getBody().getDistancia() + "km");
        System.out.println("Veículo: " + response.getBody().getFrete().getTipoVeiculo());
        System.out.println("Valor Final: R$ " + String.format("%.2f", response.getBody().getValorFinal()));
        System.out.println("Desconto por Volume: " + response.getBody().getPercentualDesconto() + "%\n");
    }

    @Test
    public void testVendaLongaDistancia() {
        // Cenário: 25 caixas, 150km - testa desconto após 100km
        MashupApplication.VendaRequest request = new MashupApplication.VendaRequest();
        request.setQuantidadeCaixas(25);
        request.setDistancia(150);

        ResponseEntity<MashupApplication.VendaResponse> response = restTemplate.postForEntity(
            "http://localhost:" + port + "/api/vendas/calcular", 
            request, 
            MashupApplication.VendaResponse.class
        );

        assertEquals(HttpStatus.OK, response.getStatusCode());
        
        System.out.println("Teste 4 - Longa distância (desconto frete após 100km):");
        System.out.println("Quantidade: " + response.getBody().getQuantidadeCaixas() + " caixas");
        System.out.println("Distância: " + response.getBody().getDistancia() + "km");
        System.out.println("Veículo: " + response.getBody().getFrete().getTipoVeiculo());
        System.out.println("Valor Base Frete: R$ " + String.format("%.2f", response.getBody().getFrete().getValorBase()));
        System.out.println("Valor Total Frete: R$ " + String.format("%.2f", response.getBody().getFrete().getValorTotal()));
        System.out.println("Valor Final: R$ " + String.format("%.2f", response.getBody().getValorFinal()));
        System.out.println();
    }
}

// TestRunner.java - Classe para executar testes manuais
package com.mashup;

import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;

public class TestRunner {
    
    private static final String MASHUP_URL = "http://localhost:8080/api/vendas/calcular";
    private static final String PRECO_URL = "http://localhost:8081/api/tomate/preco";
    private static final RestTemplate restTemplate = new RestTemplate();

    public static void main(String[] args) {
        System.out.println("=== TESTES DE INTEGRAÇÃO DOS SERVIÇOS ===\n");
        
        // Teste individual do serviço de preço
        testarServicoPreco();
        
        // Testes do mashup (integração completa)
        testarMashupCompleto();
    }

    private static void testarServicoPreco() {
        System.out.println("TESTANDO SERVIÇO DE PREÇO INDIVIDUALMENTE:");
        System.out.println("----------------------------------------------");
        
        try {
            // Teste com diferentes quantidades
            int[] quantidades = {5, 15, 25, 50};
            
            for (int qtd : quantidades) {
                String url = PRECO_URL + "?quantidade=" + qtd;
                ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
                
                System.out.println("Quantidade: " + qtd + " caixas");
                System.out.println("Response: " + response.getBody());
                System.out.println();
            }
        } catch (Exception e) {
            System.out.println("Erro ao testar serviço de preço: " + e.getMessage());
        }
    }

    private static void testarMashupCompleto() {
        System.out.println("TESTANDO MASHUP (INTEGRAÇÃO COMPLETA):");
        System.out.println("------------------------------------------");
        
        // Cenários de teste
        TestCase[] cenarios = {
            new TestCase(5, 30, "Poucas caixas, curta distância"),
            new TestCase(15, 80, "Quantidade média, média distância"), 
            new TestCase(60, 120, "Volume com desconto 7.5%"),
            new TestCase(350, 180, "Volume alto com desconto 12%"),
            new TestCase(280, 50, "Teste limite capacidade caminhão"),
            new TestCase(400, 250, "Volume alto, longa distância")
        };

        for (TestCase cenario : cenarios) {
            executarCenario(cenario);
        }
    }

    private static void executarCenario(TestCase cenario) {
        try {
            MashupApplication.VendaRequest request = new MashupApplication.VendaRequest();
            request.setQuantidadeCaixas(cenario.quantidade);
            request.setDistancia(cenario.distancia);

            ResponseEntity<MashupApplication.VendaResponse> response = 
                restTemplate.postForEntity(MASHUP_URL, request, MashupApplication.VendaResponse.class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                MashupApplication.VendaResponse venda = response.getBody();
                
                System.out.println(cenario.descricao);
                System.out.println("Quantidade: " + venda.getQuantidadeCaixas() + " caixas");
                System.out.println("Distância: " + venda.getDistancia() + "km");
                System.out.println("Veículo: " + venda.getFrete().getTipoVeiculo());
                System.out.println("Preço Tomates: R$ " + String.format("%.2f", venda.getPrecoTomate().getPrecoFinal()));
                System.out.println("Custo Frete: R$ " + String.format("%.2f", venda.getFrete().getValorTotal()));
                System.out.println("Desconto Volume: " + venda.getPercentualDesconto() + "%");
                System.out.println("VALOR FINAL: R$ " + String.format("%.2f", venda.getValorFinal()));
                System.out.println();
            } else {
                System.out.println("Erro no cenário: " + cenario.descricao);
            }
            
        } catch (Exception e) {
            System.out.println("Erro ao executar cenário '" + cenario.descricao + "': " + e.getMessage());
        }
    }

    static class TestCase {
        int quantidade;
        int distancia;
        String descricao;

        TestCase(int quantidade, int distancia, String descricao) {
            this.quantidade = quantidade;
            this.distancia = distancia;
            this.descricao = descricao;
        }
    }
}

// script-teste.sh - Script para automatizar testes via curl
#!/bin/bash

echo "=== SCRIPT DE TESTES DOS SERVIÇOS ==="
echo

# Verificar se os serviços estão rodando
echo "Verificando status dos serviços..."
echo

# Teste Serviço de Preço (REST)
echo "Testando Serviço de Preço (REST - Porta 8081):"
curl -s "http://localhost:8081/api/tomate/preco?quantidade=15" | python3 -m json.tool
echo

# Teste Serviço de Frete (GraphQL)
echo "Testando Serviço de Frete (GraphQL - Porta 8082):"
curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{"query": "{ calcularFrete(quilometragem: 120, tipoVeiculo: \"CAMINHAO\") { quilometragem tipoVeiculo valorTotal } }"}' \
  http://localhost:8082/graphql | python3 -m json.tool
echo

# Teste Mashup (Integração)
echo "Testando Mashup (Integração - Porta 8080):"
curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{"quantidadeCaixas": 75, "distancia": 120}' \
  http://localhost:8080/api/vendas/calcular | python3 -m json.tool
echo

echo "Testes concluídos!"

# Teste-load.js - Teste de carga simples com Node.js
const axios = require('axios');

async function testeIntegracao() {
    console.log('=== TESTE DE INTEGRAÇÃO AUTOMATIZADO ===\n');
    
    const cenarios = [
        { quantidade: 5, distancia: 30, nome: 'Pedido Pequeno' },
        { quantidade: 60, distancia: 100, nome: 'Pedido Médio com Desconto' },
        { quantidade: 400, distancia: 200, nome: 'Pedido Grande' }
    ];

    for (const cenario of cenarios) {
        try {
            console.log(`🧪 Testando: ${cenario.nome}`);
            
            const response = await axios.post('http://localhost:8080/api/vendas/calcular', {
                quantidadeCaixas: cenario.quantidade,
                distancia: cenario.distancia
            });

            const venda = response.data;
            console.log(`Sucesso!`);
            console.log(`${venda.quantidadeCaixas} caixas`);
            console.log(`Veículo: ${venda.frete.tipoVeiculo}`);
            console.log(`Valor: R$ ${venda.valorFinal.toFixed(2)}`);
            console.log(`Desconto: ${venda.percentualDesconto}%\n`);
            
        } catch (error) {
            console.log(`    Erro: ${error.message}\n`);
        }
    }
}

// Executar se for chamado diretamente
if (require.main === module) {
    testeIntegracao();
}